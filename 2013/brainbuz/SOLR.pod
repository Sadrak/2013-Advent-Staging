=head1 TITLE

An Example Catalyst Plugin - Catalyst::Plugin::RunRequest

=head1 OVERVIEW

Using L<Solr|http://lucene.apache.org/Solr/>, a Search Server from L<Apache's Lucene Project|http://lucene.apache.org> as a B<Catalyst Model>.

=head1 INTRODUCTION

Compared to conventional database search (and the full text query extensions found in most modern SQL implementations), a Search Server is going to provide better performance and search features. Since Solr is writeable as well as readable it can be used as a NoSQL datastore, with all the caveats that accompany something which is certainly not ACID compliant.

=head2 Solr Basics

Solr is a java servelet, implementing a web based interface to Lucene. Requests to Solr are made via http requests. Request data may be sent in either post or get values. Data is returned in json but Solr will also return data in xml or csv formats. Similarly posts of data to Solr may be in any of these formats. Lucene provides indexing and search technology, as well as spellchecking, hit highlighting and advanced analysis/tokenization capabilities. The Data Import Handler will allow you to import from lots of other sources rather than needing to post it all through web requests. Once up and going it gives you a lot of possibilities for finding documents. 

=head2 Alternatives To Solr

=begin html

<p>The most obvious alternative to Solr is direct implementation of Lucene. Since the purpose of Solr is to provide a more useable interface to Lucene in the first place, this does not seem like a good way to get started. An Alternative to Solr that is also built on Lucene is <a href="http://www.elasticsearch.org">ElasticSearch</a>. At this time there is far more written about Solr and I did not experiment with ElasticSearch. There is an official Elasticsearch module on CPAN which seems to be under very active development. </p>
<p>The Google Search Appliance offerings are expensive and have a lot of functionality limitations, they are great for simple search collections, Google also has a cloud based search offering, which has considerably less features than the appliance. The best google alternative is to point your visitors at google.com with a site qualifier in the redirect (or any other public search engine). For a lot of developers the AWS CloudSearch service is going to be of great interest, while not free as Solr is the administrative costs will for most enterprises make it the cheaper choice vs Solr or Google Appliance, on the downside it has a far more limited feature set than Solr and does not offer the option of going under the hood as Lucene provides to Solr. If you want to look at even more options Google or DuckDuckGo (who don't seem to be trying to sell search tools at the moment) will help you find them.</p>

=end html

=head2 Perl Modules

There are a number of Perl Modules available for Solr, the two that appear the most viable are Apache::Solr and WebService::Solr. Unfortunately,
all of the modules have problems both in bugs and unimplemented features. I looked at these and some other options and my first time through none of them rated satisfactory. Initally I had the best luck with Apache::Solr but was not very satisfied with it. After reading through the source code several of the modules, I decided to work with WebService::Solr.

=head1 Preparing the Environment

You will need to have a Catalyst Development Environment ready, in addition you should install WebService::Solr and optionally Catalyst::Model::WebService::Solr. You will also need to install a JVM like open JDK and then download a copy of Solr  from L<http://lucene.apache.org/solr/downloads.html|http://lucene.apache.org/solr/downloads.html>.  Once downloaded and extracted you will need to load the example data. Open up two terminals. To save space I'll refer you to the Solr tutorial, to speed up you use post.sh in the exampledocs folder to populate the test data, and skip ahead to querying to confirm that you have loaded the 32 documents.
 
 Terminal 1
 cd ..path_to../example
 java -jar start.jar
 
 Terminal 2
 cd ..path_to../example/exampledocs
 ./post.sh *.xml

=head1 How Implement a Thin Model

If you would like to implement a thin model, use Catalyst::Model::WebService::Solr. It is pretty easy to install from the POD, but as a practical matter you'll need to 
do a bunch of work which doesn't belong in your Controller to prepare your queries, for which reason I am not going to deal with it further.

=head1 How Implement a Fat Model

With a fat model you can include your supporting methods in the model, and test them in place in the model, and it is easy to write tests against your Model. So you want to put as much of your Solr related logic into the Model (or into some standalone modules in lib if you find yourself cutting and pasting between Model modules). I implemented the fat model as a simple extension of Catalyst::Model. 





=head1 $SECTIONS

As many sections as neeed to complete the article!



=head1 For More Information

Where to go to learn more, for example links to CPAN distributions or source code on Github

=head1 Summary

Review of what the reader just learned.

=head1 Author

Your Name <your@email.com> IRC nick

=cut
