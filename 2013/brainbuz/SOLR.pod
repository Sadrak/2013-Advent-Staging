=head1 TITLE

An Example Catalyst Plugin - Catalyst::Plugin::RunRequest

=head1 OVERVIEW

=begin html

<p>Using <a href="http://lucene.apache.org/solr/">SOLR</a>, a Search Server from <a href="http://lucene.apache.org/">Apache's Lucene Project</a> as a <em>Catalyst Model</em>.</p>

=end html

=head1 INTRODUCTION

Compared to conventional database search (and the full text query extensions found in most modern SQL implementations), a Search Server like SOLR is going to provide better performance and a more specific feature set. SOLR is a server built on top of Lucene, which is more of a raw toolkit for search components, both run as a java servlet. 

=head2 Alternatives To SOLR

=begin html

<p>The most obvious alternative to SOLR is direct implementation of Lucene. Since the purpose of SOLR is to provide a more useable interface to Lucene in the first place, this does not seem like a good way to get started. An Alternative to SOLR that is also built on Lucene is <a href="http://www.elasticsearch.org">ElasticSearch</a>. At this time there is far more written about SOLR and I did not experiment with ElasticSearch. There is an official Elasticsearch module on CPAN which seems to be under very active development. </p>
<p>The Google Search Appliance offerings are expensive and have a lot of functionality limitations, they are great for simple search collections, Google also has a cloud based search offering, which has considerably less features than the appliance. The best google alternative is to point your visitors at google.com with a site qualifier in the redirect (or any other public search engine). For a lot of developers the AWS CloudSearch service is going to be of great interest, while not free as SOLR is the administrative costs will for most enterprises make it the cheaper choice vs SOLR or Google Appliance, on the downside it has a far more limited feature set than SOLR and does not offer the option of going under the hood as Lucene provides to SOLR. If you want to look at even more options Google or DuckDuckGo (who don't seem to be trying to sell search tools at the moment) will help you find them.</p>

=end html

=head2 Perl Modules

There are a number of Perl Modules available for SOLR, the two that appear the most viable are Apache::Solr and WebService::Solr. Unfortunately,
all of the modules have problems both in bugs and unimplemented features. On my first go round they all failed. When trying out a module my normal initial criteria is following the documentation or how-to article to get some core of basic features working. Initally I had the best luck with Apache::Solr but was not very satisfied with it and ended up reading through the source code of both it and WebService::Solr. 




=head1 $SECTIONS

As many sections as neeed to complete the article!



=head1 For More Information

Where to go to learn more, for example links to CPAN distributions or source code on Github

=head1 Summary

Review of what the reader just learned.

=head1 Author

Your Name <your@email.com> IRC nick

=cut
